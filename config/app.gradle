apply plugin: 'com.android.application'
apply from: "$rootDir/config/android.gradle"

//参考：https://developer.android.google.cn/studio/build/gradle-tips?hl=zh-cn

def module_type = module_type[project.name]
def dg = 1 == module_type
android {
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['src/main/assets']
            if (dg){
                java.srcDirs =  ['debug/java','src/main/java']
                manifest.srcFile 'debug/AndroidManifest.xml'
                res.srcDirs = ['src/main/res','debug/res']
            }
        }
    }

    signingConfigs {
        release {
            // storeFile 出于安全考虑，将签名信息放到文件中。
            File propFile = file("$rootDir/config/other/signing.properties")
            if (propFile.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(propFile))
                def signFilePath = "$rootDir/config/other/pds.keystore"
                if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                    android.signingConfigs.release.storeFile = file(signFilePath)
                    android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
                    android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
                    android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
                } else {
                    android.buildTypes.release.signingConfig = null
                }
            } else {
                android.buildTypes.release.signingConfig = null
            }
        }

        debug {
            storeFile file("$rootDir/config/other/pds.keystore")
            keyAlias 'pds'
            keyPassword 'pds123'
            storePassword 'pds123'
        }
    }

    buildTypes {
        debug {
            // Run code coverage reports by default on debug builds.
            testCoverageEnabled = true

            minifyEnabled false
            zipAlignEnabled true
            debuggable true
            shrinkResources false // 移除无用的resource文件
            ndk {
                // flutter:这里要加上，否则debug包会出问题,后面三个为可选，x86建议加上不然部分模拟器回报错
                // abiFilters "armeabi","armeabi-v7a","arm64-v8a", "x86"
                // 加上arm64-v8a，React Native报错：libgnustl_shared.so" is 32-bit instead of 64-bit
                // abiFilters "armeabi","armeabi-v7a","x86"
                abiFilters "armeabi-v7a","x86"
            }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            debuggable false
            minifyEnabled true
            signingConfig signingConfigs.release
            ndk {
                // flutter:这里要加上，否则debug包会出问题,后面三个为可选，x86建议加上不然部分模拟器回报错
                // abiFilters "armeabi","armeabi-v7a","arm64-v8a", "x86"
                // 加上arm64-v8a，React Native报错：libgnustl_shared.so" is 32-bit instead of 64-bit
                // abiFilters "armeabi","armeabi-v7a"
                abiFilters "armeabi-v7a"
            }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        // staging{
            // Specifies a sorted list of fallback build types that the
            // plugin should try to use when a dependency does not include a
            // "staging" build type. You may specify as many fallbacks as you
            // like, and the plugin selects the first build type that's
            // available in the dependency.
            // 回退机制
            // matchingFallbacks = ['debug', 'release']
        // }
    }

    // 测试相关配置
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

//    flavorDimensions 'tier'
//    productFlavors {
//        paid {
//            dimension 'tier'
//            // Because the dependency already includes a "paid" flavor in its
//            // "tier" dimension, you don't need to provide a list of fallbacks
//            // for the "paid" flavor.
//        }
//        free {
//            dimension 'tier'
//            // Specifies a sorted list of fallback flavors that the plugin
//            // should try to use when a dependency's matching dimension does
//            // not include a "free" flavor. You may specify as many
//            // fallbacks as you like, and the plugin selects the first flavor
//            // that's available in the dependency's "tier" dimension.
//            matchingFallbacks = ['demo', 'trial']
//        }
//    }
}

repositories {
    flatDir {
        try {
            dirs 'libs','../base/lib_pay/libs'
        } catch (e) {

        }
    }
}