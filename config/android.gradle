//def ext = rootProject.ext
//String ROOT_DIR = System.getProperty("user.dir")
def module_name = project.name
def id = id[module_name]
def cMakeListPath = "$rootDir${project.path.replaceAll(':', '/')}/CMakeLists.txt"
def hasCMakeListFile = new File(cMakeListPath).exists()
android {
    compileSdkVersion app.compileSdkVersion
    defaultConfig {
        vectorDrawables.useSupportLibrary = true
        if (id) {
            applicationId id
            multiDexEnabled true
            resValue("string", "applicationId", id)
        }
        // 用于子module通过反射获取应用上下文，对应类请不要混淆
        buildConfigField "String", "APPLICATION_CLASS_NAME", "\"com.pds.blog.BlogApplication\""
        buildConfigField "String", "APPLICATION_VAR_NAME", "\"mApp\""
        minSdkVersion app.minSdkVersion
        targetSdkVersion app.targetSdkVersion
        versionCode app.versionCode
        versionName app.versionName
        if (hasCMakeListFile) {
            externalNativeBuild {
                cmake {
                    cppFlags "-frtti -fexceptions"
                }
            }

            ndk {
                moduleName "app"
                abiFilters "armeabi-v7a" //指定平台
                cFlags "-DANDROID_NDK"
            }
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        /*
        The Android Testing Support Library collects analytics to continuously improve the testing
        experience. More specifically, it uploads a hash of the package name of the application
        under test for each invocation. If you do not wish to upload this data, you can opt-out by
        passing the following argument to the test runner: disableAnalytics "true".
        */
        //testInstrumentationRunnerArguments disableAnalytics: 'true'

        /*
        Uncomment this to pass custom arguments to AndroidJUnitRunner. If uncommented the
        custom argument "argument1" will be passed to AndroidJUnitRunner and make
        AndroidLibraryModuleIntegrationTest fail.
         */
        // testInstrumentationRunnerArgument "argument1", "make_test_fail

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]

                // Creates a new MyArgsProvider object, specifies the input and
                // output paths for the constructor, and passes the object
                // to the Android plugin.
                // Android Gradle 插件 3.2.0 及更高版本时，您需要使用 Gradle 的 CommandLineArgumentProvider 接口传递表示文件或目录的处理器参数
                // compilerArgumentProvider new BlogArgsProvider(files("input/path"), new File("output/path"))
            }
        }

        //获取命令行输入参数,获取后控制使用测试环境，还是线上环境
        // def urlType = project.hasProperty('platformService') ? Integer.parseInt(platformService) : TEST
        // javaCompileOptions {
        //   annotationProcessorOptions {
        //       includeCompileClasspath = true
        //    }
        // }
    }

    // dexOptions {
    //   incremental true
    // }

    defaultConfig {
        //只支持中文
        resConfigs "zh"
    }

    if (hasCMakeListFile) {
        sourceSets {
            main {
                jniLibs.srcDirs = ['libs']
            }
        }
        externalNativeBuild {
            cmake {
                path "CMakeLists.txt"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    /**主module一定要加,不然会出问题 */
    dataBinding {
        enabled true
    }
}

/**
 * 自定义class
 */

class BlogArgsProvider implements CommandLineArgumentProvider {
    // Annotates each directory as either an input or output for the
    // annotation processor.
    @InputFiles
    // Using this annotation helps Gradle determine which part of the file path
    // should be considered during up-to-date checks.
    @PathSensitive(PathSensitivity.RELATIVE)
    FileCollection inputDir

    @OutputDirectory
    File outputDir

    // The class constructor sets the paths for the input and output directories.
    BlogArgsProvider(FileCollection input, File output) {
        inputDir = input
        outputDir = output
    }

    // Specifies each directory as a command line argument for the processor.
    // The Android plugin uses this method to pass the arguments to the
    // annotation processor.
    @Override
    Iterable<String> asArguments() {
        // Use the form '-Akey[=value]' to pass your options to the Java compiler.
        ["-AinputDir=${inputDir.singleFile.absolutePath}",
         "-AoutputDir=${outputDir.absolutePath}"]
    }
}