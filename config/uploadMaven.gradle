//release最新版本
//def publishVersion = '1.0.10'
//snapshot最新版本
def publishVersion = '1.0.27'
def releaseVersion = publishVersion
def snapshotVersion = "${publishVersion}-SNAPSHOT"

//上传maven的task，上传时修改libVersion版本号，执行本task完成maven上传
task publishToMedMaven() {
    group("publishing")
    doLast {
        dependsOn.forEach {
            println("-----publishing task dependency: ${it}")
        }
    }
}

task publishToMedSnapshotMaven() {
    group("publishing")
    doLast {
        dependsOn.forEach {
            println("-----publishing snapshot task dependency: ${it}")
        }
    }
}


def isLibInUpload(String libName, List<String> libNames) {
    String path = ":${libName}"
    for (name in libNames) {
        if (name == path) {
            return true
        }
    }

    return false
}

def generalLib(String libVersion, MavenPublication publish, Project pro, List<String> uploadLibs) {
    publish.groupId = 'com.medlinker'
    publish.artifactId = pro.name.lastIndexOf(':') > 0 ? pro.name.substring(pro.name.lastIndexOf(':'), pro.name.size()) : pro.name
    publish.version = libVersion
    publish.artifact(pro.tasks.getByName("bundleDebugAar"))

    publish.pom.withXml {
        //在pom.xml添加依赖关系
        def dependenciesNode = asNode().appendNode('dependencies')
        //拿到所有编译时的依赖
        def dependenciesList = []
        dependenciesList.addAll(pro.configurations.debugRuntimeClasspath.allDependencies)
        dependenciesList.each {
            if (null != it.group && it.group != "android") {
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', it.group)
                dependencyNode.appendNode('artifactId', it.name)

                if (it.group == publish.groupId && isLibInUpload(it.name, uploadLibs)) {
                    dependencyNode.appendNode('version', libVersion)
                } else {
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }

    }
}

subprojects {
    if (project.name != "app") {
        apply plugin: 'maven-publish'
    }

    //定义需要上传到maven的lib
    def needUploadLib = [':LibBase',
                         ":LibCommon",
                         ":LibGlide",
    ]


    project.afterEvaluate {
        if (project.path in needUploadLib) {
            project.tasks.whenTaskAdded { task ->
                if (task.name == "publishDebugPublicationToReleaseRepository") {
                    println("add publish dependency for " + project.name)
                    publishToMedMaven.dependsOn(task)
                }

                if (task.name == "publishDebugPublicationToSnapshotRepository"
                        || task.name == "publishSnapshotPublicationToReleaseRepository") {
                    project.tasks.remove(task)
                }

                if (task.name == "publishSnapshotPublicationToSnapshotRepository") {
                    println("add publish snapshot dependency for " + project.name)
                    publishToMedSnapshotMaven.dependsOn(task)
                }
            }

            publishing.repositories {
                maven {
                    // change to point to your repo, e.g. http://my.org/repo
                    url ''
                    name "release"
                    credentials {
                        username = ''
                        password = ''
                    }
                }

                maven {
                    // change to point to your repo, e.g. http://my.org/repo
                    url ''
                    name "snapshot"
                    credentials {
                        username = ''
                        password = ''
                    }
                }
            }

            publishing.publications {

                debug(MavenPublication) { publishTask ->
                    //发布库的版本，到local-android仓库
                    afterEvaluate {
                        generalLib(releaseVersion, publishTask, it, needUploadLib)
                    }
                }

                snapshot(MavenPublication) { publishTask ->
                    //发布库的版本，到local-android-snapshot仓库
                    afterEvaluate {
                        generalLib(snapshotVersion, publishTask, it, needUploadLib)
                    }

                }
            }
        }
    }

    // 依赖库替换成module源码,发现某个module有的maven库有问题时可使用
    configurations.all {
        resolutionStrategy.dependencySubstitution {
            substitute module('com.medlinker:LibBase') with project(':LibBase')
            substitute module('com.medlinker:LibCommon') with project(":LibCommon")
            substitute module('com.medlinker:LibWidget') with project(':LibWidget')
            // 直接指定版本
            // 在引入时配置，指定版本为我们引入的版本
            // implementation("io.reactivex.rxjava2:rxjava:2.1.6") {force = true}
            // resolutionStrategy.force 'io.reactivex.rxjava2:rxjava:2.1.6'
            // 禁止传递依赖
            // transitive = false

// eachDependency允许你在gradle解析配置时为每个依赖项添加一个替换规则

//            esolutionStrategy.eachDependency { DependencyResolveDetails details ->
//                if (details.requested.name == 'rxjava') {
//                    //由于useVersion只能指定版本号，不适用于group不同的情况
//                    details.useTarget group: 'io.reactivex.rxjava3', name: 'rxjava', version: '3.0.0-RC1'
//                }
//            }
        }
    }
}
