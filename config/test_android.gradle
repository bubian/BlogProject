android {
    testOptions {
        // Changes the directory where Gradle saves test reports. By default, Gradle saves test reports
        // in the path_to_your_project/module_name/build/outputs/reports/ directory.
        // '$rootDir' sets the path relative to the root directory of the current project.
        reportDir "$rootDir/test-reports"

        // Changes the directory where Gradle saves test results. By default, Gradle saves test results
        // in the path_to_your_project/module_name/build/outputs/test-results/ directory.
        // '$rootDir' sets the path relative to the root directory of the current project.
        resultsDir "$rootDir/test-results"
        // 要仅为本地单元测试指定选项，请配置 testOptions {} 中的 unitTests {} 代码块。
        unitTests {
            // 如果您的测试依赖于资源 默认情况下，Android Studio 3.4 及更高版本提供编译版本的资源。
            includeAndroidResources = false

            all {
                // Sets JVM argument(s) for the test JVM(s).
                jvmArgs '-XX:MaxPermSize=256m'

                // You can also check the task name to apply options to only the tests you specify.
                if (it.name == 'testDebugUnitTest') {
                    systemProperty 'debug', 'true'
                }
            }
        }
    }

    defaultConfig {
        // Specifies the application ID for the test APK.
        testApplicationId "com.test.${project.name}"
        // Specifies the fully-qualified class name of the test instrumentation runner.
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        // If set to 'true', enables the instrumentation class to start and stop profiling.
        // If set to false (default), profiling occurs the entire time the instrumentation
        // class is running.
        testHandleProfiling true
        // If set to 'true', indicates that the Android system should run the instrumentation
        // class as a functional test. The default value is 'false'
        testFunctionalTest true
    }
    // 默认情况下，所有测试均针对调试构建类型运行。您可以利用模块级 build.gradle 文件中的 testBuildType 属性将其更改为针对其他构建类型运行。
    // 例如，如果您要针对“staging”构建类型运行测试，请按以下代码段所示对该文件进行修改。
    testBuildType "staging"

    // 默认情况下，测试模块会包含并仅测试 debug 变体。不过，您可以创建新的构建类型，使其与测试的应用项目匹配。
    // 要使测试模块测试其他构建类型（而不测试调试构建类型），请使用 VariantFilter 停用测试项目中的 debug 变体，如下所示：

    variantFilter { variant ->
        if (variant.buildType.name == 'debug') {
            variant.setIgnore(true)
        }
    }

    buildTypes {
        debug {}
        release {}
        staging {
            // 如果您希望测试模块仅测试应用的某些变种或构建类型，则可以使用 matchingFallbacks 属性，以仅测试要测试的变体。这也使得测试模块无需针对自身配置这些变体。
            matchingFallbacks = ['debug', 'qa', 'release']
        }
    }
}