apply from: "../config/module.gradle"
apply from: "../config/kotlin.gradle"
apply plugin: 'aspect'
//apply plugin: 'webp'

apply plugin: 'cn.hikyson.methodcanary.plugin'
AndroidGodEye {
    enableMethodTracer true // 方法耗时检测，注意，生产包中关闭它，举例，这里可以这么写：!gradle.startParameter.taskNames.contains("assembleRelease")
    enableLifecycleTracer true // 页面生命周期检测
    instrumentationRuleFilePath 'config/other/AndroidGodEye-MethodCanary.js'
    instrumentationRuleIncludeClassNamePrefix(['com.pds.blog'])
}

android {
    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        //获取命令行输入参数,获取后控制使用测试环境，还是线上环境
//        def urlType = project.hasProperty('platformService') ? Integer.parseInt(platformService) : TEST

//        javaCompileOptions {
//            annotationProcessorOptions {
//                includeCompileClasspath = true
//            }
//        }
        // ndk
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }
        ndk {
            moduleName "app"
            abiFilters "armeabi-v7a", "x86" //指定平台
            cFlags "-DANDROID_NDK"
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

//    dexOptions {
//        incremental true
//    }


    defaultConfig {
        //只支持中文
        resConfigs "zh"
    }

    sourceSets {
        def dirs = ['p_restaurant', 'p_goods_detail', 'p_comment', 'p_compose_order',
                    'p_shopping_cart', 'p_base', 'p_product_set']
        main {
            jniLibs.srcDirs = ['libs']
        }

//        main {
//            manifest.srcFile 'src/p_restaurant/main/AndroidManifest.xml'
//            dirs.each { dir ->
//                java.srcDir("src/${dir}/main/java")
//                res.srcDir("src/${dir}/main/res")
//            }
//        }
//        wm {
//            dirs.each { dir ->
//                java.srcDir("src/${dir}/wm/java")
//                res.srcDir("src/${dir}/wm/res")
//            }
//        }
//        mt {
//            dirs.each { dir ->
//                java.srcDir("src/${dir}/mt/java")
//                res.srcDir("src/${dir}/mt/res")
//            }
//        }
    }

//    productFlavors {
//        wm {}
//        mt {}
//    }
    buildTypes {
        debug {
            resValue("bool", "android_god_eye_manual_install", "false")
            resValue("bool", "android_god_eye_need_notification", "true")
            resValue("integer", "android_god_eye_monitor_port", "5390")
            resValue("string", "android_god_eye_install_assets_path", "android-godeye-config/install.config")

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

//        releaseWithLog {
//            splitsEnabled = true
//        }
//        release.initWith(releaseWithLog)
        release {
            resValue("bool", "android_god_eye_manual_install", "false") // 是否手动安装，默认false
            resValue("bool", "android_god_eye_need_notification", "false") // 是否展示通知栏，默认false，生产环境请关闭
            resValue("integer", "android_god_eye_monitor_port", "5390") // Monitor端口，默认5390
            resValue("string", "android_god_eye_install_assets_path", "android-godeye-config/install.config") // 安装配置文件在assets中的路径

            minifyEnabled true
            zipAlignEnabled true
            // 移除无用的resource文件
            // shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


dependencies {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation project(':base:lib_package')
    compile project(path: ':lib_preloader')
    implementation project(path: ':base:mode_ui')
    compile project(path: ':base:lib_util')
    compile project(path: ':base:lib_net')
    //    compile project(':lib_aspect_annotations')
    // rxlifecycle
    implementation 'com.trello.rxlifecycle3:rxlifecycle:3.1.0'
    implementation 'com.trello.rxlifecycle3:rxlifecycle-android:3.1.0'
    implementation 'com.trello.rxlifecycle3:rxlifecycle-components:3.1.0'
    // If you want pre-written support preference Fragments you can subclass as providers
    implementation 'com.trello.rxlifecycle3:rxlifecycle-components-preference:3.1.0'
    // If you want to use Android Lifecycle for providers
    implementation 'com.trello.rxlifecycle3:rxlifecycle-android-lifecycle:3.1.0'
    // https://github.com/JakeWharton/RxBinding/
    implementation 'com.jakewharton.rxbinding3:rxbinding-material:3.1.0'
    // Guava是Google的一组核心Java库，其中包括新的集合类型（例如多图和多集），不可变的集合，图形库以及用于并发，I / O，哈希，缓存，基元，字符串等的实用程序！
    // 它广泛用于Google的大多数Java项目中，也被许多其他公司广泛使用。
    // https://github.com/google/guava/
    implementation 'com.google.guava:guava:28.2-android'
    implementation 'com.zhy:base-adapter:2.0.0'
    // AndroidGodEye(https://github.com/Kyson/AndroidGodEye)
    // 核心模块，必须依赖
    implementation 'cn.hikyson.godeye:godeye-core:3.4.2'
    // Debug包配置Debug看板
    debugImplementation 'cn.hikyson.godeye:godeye-monitor:3.4.2'
    // From Version 3.4.0, godeye-monitor-no-op has been removed.
    // releaseImplementation 'cn.hikyson.godeye:godeye-monitor-no-op:3.4.2'
    // 额外依赖，如果项目使用OkHttp作为网络请求可以用这个库完成网络监控
    implementation 'cn.hikyson.godeye:godeye-okhttp:3.4.2'
    // 额外依赖，添加此依赖可以完成Crash监控，如果不依赖则无法监控Crash（安装了也不会生效）
    implementation 'cn.hikyson.godeye:godeye-xcrash:3.4.2'
    // 额外依赖，添加此依赖可以监控内存泄漏，如果不依赖则无法监控（安装了也不会生效），如果你也依赖了LeakCanary则无法依赖这个库，否则你项目中的LeakCanary会失效
    debugImplementation 'cn.hikyson.godeye:godeye-leakcanary:3.4.2'
    implementation files('libs/tbs_sdk_thirdapp_v4.3.0.3.jar')
}