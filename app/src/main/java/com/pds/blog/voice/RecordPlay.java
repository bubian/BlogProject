package com.pds.blog.voice;import android.content.Context;import android.media.AudioManager;import android.media.MediaPlayer;import android.media.MediaPlayer.OnCompletionListener;import android.media.MediaPlayer.OnErrorListener;import android.media.MediaPlayer.OnPreparedListener;import java.io.IOException;public class RecordPlay implements OnCompletionListener,        OnPreparedListener, OnErrorListener {    private volatile boolean isPlaying = false;    private Context mContent;    int mPosition;    String mMediaFilePath;    MediaPlayer mediaPlayer;    public RecordPlay(Context content) {        this.mContent = content;    }    private void startPlayer(final String mediaFilePath) throws IOException {        try {            mPosition = 0;            mediaPlayer.reset();            mediaPlayer.setDataSource(mediaFilePath);            mediaPlayer.setLooping(false);            mediaPlayer.prepareAsync();// player只有调用了onpraparre（）方法后才会调用onstart（）        } catch (IOException e) {            e.printStackTrace();        } catch (IllegalArgumentException e) {            e.printStackTrace();        } catch (SecurityException e) {            e.printStackTrace();        } catch (IllegalStateException e) {            e.printStackTrace();        }    }    public String getMediaPath() {        return mMediaFilePath;    }    public void recycleRes() {        try {            if (mediaPlayer != null) {                if (isPlaying) {                    try {                        mediaPlayer.stop();                    } catch (Exception e) {                        e.printStackTrace();                    }                }                try {                    mediaPlayer.release();                } catch (Exception e) {                    e.printStackTrace();                }            }            isPlaying = false;        } catch (Exception e) {            e.printStackTrace();        }    }    public void recycleCallback() {        try {            recycleRes();        } catch (Exception e) {            e.printStackTrace();        }    }    public synchronized void toggle() {        try {            if (isPlaying) {                isPlaying = false;                try {                    mPosition = mediaPlayer.getCurrentPosition();                } catch (Exception e) {                    e.printStackTrace();                }                try {                    mediaPlayer.pause();                } catch (Exception e) {                    e.printStackTrace();                }            } else {                init();                try {                    startPlayer(mMediaFilePath);                } catch (Exception e) {                    e.printStackTrace();                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public synchronized void onCompletion(MediaPlayer mp) {        mPosition = 0;        try {            mp.stop();            isPlaying = false;        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public synchronized void onPrepared(MediaPlayer arg0) {        try {            mediaPlayer.start();            isPlaying = true;        } catch (IllegalStateException e) {            e.printStackTrace();        }    }    private void init() {        try {            mediaPlayer = new MediaPlayer();            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);            mediaPlayer.setOnCompletionListener(this);            mediaPlayer.setOnPreparedListener(this);            mediaPlayer.setOnErrorListener(this);        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public synchronized boolean onError(MediaPlayer arg0, int arg1, int arg2) {        try {            arg0.reset();            isPlaying = false;        } catch (Exception e) {            e.printStackTrace();        }        return true;    }}